<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1505.vea_4b_20a_4a_495">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction
            plugin="pipeline-model-definition@2.2221.vc657003fb_d93" />
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction
            plugin="pipeline-model-definition@2.2221.vc657003fb_d93">
            <jobProperties />
            <triggers />
            <parameters />
            <options />
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties />
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition"
        plugin="workflow-cps@4018.vf02e01888da_f">
        <script>pipeline {
            environment {
            registry = &quot;bddagostino/exercise1&quot;
            registryCredential = &apos;dockerhub_id&apos;
            dockerImage = &apos;&apos;
            dockerImageLatest = &apos;&apos;
            }
            agent any
            stages {
            //stage(&apos;Cloning our Git&apos;) {
            //steps {
            //git &apos;https://github.com/dynux90/delivery-devops-exercises.git&apos;
            //}
            //}
            stage(&apos;Checkout&apos;) {
            steps {
            checkout scmGit(
            branches: [[name: &apos;main&apos;]],
            userRemoteConfigs: [[url:
            &apos;https://github.com/dynux90/delivery-devops-exercises.git&apos;]])
            }
            }
            stage(&apos;Building our image&apos;) {
            steps{
            script {
            dockerImage = docker.build( registry + &quot;:$BUILD_NUMBER&quot;, &quot;-f
            Delivery_exercise_1/Dockerfile .&quot; )
            dockerImageLatest = docker.build( registry + &quot;:latest&quot;, &quot;-f
            Delivery_exercise_1/Dockerfile .&quot; )
            }
            }
            }
            stage(&apos;Deploy our image&apos;) {
            steps{
            script {
            docker.withRegistry( &apos;&apos;, registryCredential ) {
            dockerImage.push()
            dockerImageLatest.push()
            }
            }
            }
            }
            stage(&apos;Cleaning up&apos;) {
            steps{
            sh &quot;docker rmi $registry:$BUILD_NUMBER&quot;
            }
            }
            }
            }</script>
        <sandbox>true</sandbox>
    </definition>
    <triggers />
    <disabled>false</disabled>
</flow-definition>